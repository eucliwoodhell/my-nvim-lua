apiVersion: apps/v1
# apiVersion : v1
kind: StatefulSet
## Deployment: deployar replicar ej: un sitio web
## Daemonset: deploya en todo los nodo 1 pod en cada nodo / sirve para monitoreo de cada nodo
## en deamonset no necesita replicas
## StatefulSet: crear un pod, tiene un volumen que esta atado a un disco y no se pierde ej: db
metadata:
  name: nvim-deployment
spec:
  selector:
    matchLabels:
      app: nvim
  # replicas: 2
  template:
    metadata:
      labels:
        app: nvim
    spec: # template del pod
      containers:
        - name: nvim-deployment
          image: nginx:alpine
          args:
          - sleep
          - infinity
          volumeMounts:
          - name: nvim-pvc
            mountPath: /data
          env:
            - name: MI_VARIABLE
              value: "MI_VALUE"
            - name: MY_VARIABLE_OTRO
              value: "MY_VALUE_OTRO"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP # variable  predefinida
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits: # limite de memoria de uso
              memory: "128Mi" # kernel mata ese proceso de memoria para no superar este limite
              cpu: "500m" # 500 mili core
          readinessProbe: # forma de explicar al pod para recibir trafico
            httpGet: # pegarle a la / para saber si esta funcionando al puerto 80
              path: /
              port: 80 
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe: # explicarle al kubenerte de esta funcionando
            tcpSocket: # espera que iniciar para llamar el readinessProbe
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 25
          ports:
          - containerPort: 80 # usar puerto 80 en el contenedor
  volumenClaimTemplate:
  - metadata:
      name: nvim-pvc
    spec:
      ac
